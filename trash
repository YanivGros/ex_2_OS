


#include "uthreads.h"
#include "thread.h"
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <memory>
#include <map>
#include <list>


std::priority_queue<int, std::vector<int>, std::greater<int> > free_id_list;

std::map<int,std::unique_ptr<thread>> blocked ;
std::vector<std::unique_ptr<thread>> ready_list;
std::unique_ptr<thread> running;

int uthread_init(int quantum_usecs) {

    for (int i = 0; i < MAX_THREAD_NUM; ++i) {
        free_id_list.push(i);
    }
    return 0;
}

int uthread_spawn(thread_entry_point entry_point) {
    if (free_id_list.empty()) {
        return -1;
    }
    int free_id = free_id_list.top();
    free_id_list.pop();
    ready_list.push_back(std::unique_ptr<thread>(new thread(free_id)));
    return 0;
}

int uthread_terminate(int tid) {
    int res;
    if (running && running->getId() == tid) {
        free_id_list.push(tid);
        return 0;
    }
    if (blocked.erase(tid) != 0) {
        free_id_list.push(tid);
        return 0;
    }
    for (int i = 0; i < ready_list.size(); ++i) {
        if (ready_list[i]->getId() == tid) {

            ready_list.erase(std::remove(ready_list.begin(), ready_list.end(), ready_list[i]), ready_list.end());
            // we might dont need to erase to ready.list.end();
            free_id_list.push(tid);
            return 0;
        }
    }
    return -1;
}

int uthread_block(int tid) {
    return 0;
}


/*
 * ****************************************************
 */


int uthread_terminate(int tid) {
    int res;
    std::map<int, thread *>::iterator thread_iter;
    thread_iter = all_threads.find(tid);

    if (thread_iter == all_threads.end()) {
        return -1;
    }
    all_threads.erase(thread_iter);
    remove_from_vector(tid);
    return 0;
}

int uthread_block(int tid) {
    if (tid == 0 || all_threads.count(tid) == 0) {
        return -1;
    }
    auto cur = all_threads.at(tid);
    auto place = cur->place_;
    if (place == thread::Blocked) {
        return 0;
    } else {
        remove_from_vector(tid);
        blocked.push_back(tid);
    }
    cur->place_ = thread::Blocked;
    if (running == tid) {
        sigsetjmp(env[tid], 1);
        ready_list.push_back(tid);
        int now_running = ready_list.at(0);
        running = now_running;
        all_threads.at(now_running)->place_ = thread::Running;
        siglongjmp(env[now_running], 1);
    }
    return 0;
}

int uthread_resume(int tid) {
    if (all_threads.count(tid) == 0) {
        return -1;
    }
    auto cur = all_threads.at(tid);
    auto place = cur->place_;
    if (place == thread::Ready || place == thread::Running) {
        return 0;
    } else {
        ready_list.push_back(tid);
        cur->place_ = thread::Ready;
        return 0;
    }

}

int uthread_sleep(int num_quantums) {
    int result = sigsetjmp(env[running], 1);
    if (result == 0) {
        all_threads[running]->place_ = thread::Blocked;
        int now_running = ready_list.at(0);
        running = now_running;
        all_threads.at(now_running)->place_ = thread::Running;
        // start_timer
        struct sigaction sa = {0};
        struct itimerval timer;

        sa.sa_handler = &timer_handler;
        if (sigaction(SIGVTALRM, &sa, NULL) < 0) {
            printf("sigaction error.");
        }

        timer.it_value.tv_usec = num_quantums * quantum;
        if (setitimer(ITIMER_VIRTUAL, &timer, NULL)) {
            printf("setitimer error.");
        }
        siglongjmp(env[now_running], 1);

    }
}

